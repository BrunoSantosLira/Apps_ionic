{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, instanceAvailability, cordovaInstance } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nvar InAppBrowserObject = /** @class */function () {\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   * @param {string} url     The URL to load.\n   * @param {string} [target=\"self\"]  The target in which to load the URL, an optional parameter that defaults to _self.\n   *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n   *                 _blank: Opens in the InAppBrowser.\n   *                 _system: Opens in the system's web browser.\n   * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   */\n  function InAppBrowserObject(url, target, options) {\n    try {\n      if (options && typeof options !== 'string') {\n        options = Object.keys(options).map(function (key) {\n          return key + \"=\" + options[key];\n        }).join(',');\n      }\n      this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n    } catch (e) {\n      if (typeof window !== 'undefined') {\n        window.open(url, target);\n      }\n      console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open.');\n    }\n  }\n  InAppBrowserObject.prototype._loadAfterBeforeload = function (strUrl) {\n    return cordovaInstance(this, \"_loadAfterBeforeload\", {\n      \"sync\": true\n    }, arguments);\n  };\n  InAppBrowserObject.prototype.show = function () {\n    return cordovaInstance(this, \"show\", {\n      \"sync\": true\n    }, arguments);\n  };\n  InAppBrowserObject.prototype.close = function () {\n    return cordovaInstance(this, \"close\", {\n      \"sync\": true\n    }, arguments);\n  };\n  InAppBrowserObject.prototype.hide = function () {\n    return cordovaInstance(this, \"hide\", {\n      \"sync\": true\n    }, arguments);\n  };\n  InAppBrowserObject.prototype.executeScript = function (script) {\n    return cordovaInstance(this, \"executeScript\", {}, arguments);\n  };\n  InAppBrowserObject.prototype.insertCSS = function (css) {\n    return cordovaInstance(this, \"insertCSS\", {}, arguments);\n  };\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n  InAppBrowserObject.prototype.on = function (event) {\n    var _this = this;\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        return new Observable(function (observer) {\n          _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n          return function () {\n            return _this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n          };\n        });\n      }\n    }();\n  };\n  return InAppBrowserObject;\n}();\nexport { InAppBrowserObject };\nvar InAppBrowser = /** @class */function (_super) {\n  __extends(InAppBrowser, _super);\n  function InAppBrowser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n   * @param  url {string}     The URL to load.\n   * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.\n   * @param  options {string} Options for the InAppBrowser. Optional, defaulting to: location=yes.\n   *                 The options string must not contain any blank space, and each feature's\n   *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n   * @returns {InAppBrowserObject}\n   */\n  InAppBrowser.prototype.create = function (url, target, options) {\n    return new InAppBrowserObject(url, target, options);\n  };\n  InAppBrowser.pluginName = \"InAppBrowser\";\n  InAppBrowser.plugin = \"cordova-plugin-inappbrowser\";\n  InAppBrowser.pluginRef = \"cordova.InAppBrowser\";\n  InAppBrowser.repo = \"https://github.com/apache/cordova-plugin-inappbrowser\";\n  InAppBrowser.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n  InAppBrowser.decorators = [{\n    type: Injectable\n  }];\n  return InAppBrowser;\n}(IonicNativePlugin);\nexport { InAppBrowser };","map":{"version":3,"names":["__extends","Injectable","IonicNativePlugin","instanceAvailability","cordovaInstance","Observable","InAppBrowserObject","url","target","options","Object","keys","map","key","join","_objectInstance","cordova","InAppBrowser","open","e","window","console","warn","prototype","_loadAfterBeforeload","strUrl","arguments","show","close","hide","executeScript","script","insertCSS","css","on","event","_this","observer","addEventListener","next","bind","removeEventListener","_super","apply","create","pluginName","plugin","pluginRef","repo","platforms","decorators","type"],"sources":["C:/Users/bruno/node_modules/@ionic-native/in-app-browser/ngx/index.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, instanceAvailability, cordovaInstance } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nvar InAppBrowserObject = /** @class */ (function () {\n    /**\n     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n     * @param {string} url     The URL to load.\n     * @param {string} [target=\"self\"]  The target in which to load the URL, an optional parameter that defaults to _self.\n     *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n     *                 _blank: Opens in the InAppBrowser.\n     *                 _system: Opens in the system's web browser.\n     * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowser. Optional, defaulting to: location=yes.\n     *                 The options string must not contain any blank space, and each feature's\n     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n     */\n    function InAppBrowserObject(url, target, options) {\n        try {\n            if (options && typeof options !== 'string') {\n                options = Object.keys(options)\n                    .map(function (key) { return key + \"=\" + options[key]; })\n                    .join(',');\n            }\n            this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n        }\n        catch (e) {\n            if (typeof window !== 'undefined') {\n                window.open(url, target);\n            }\n            console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open.');\n        }\n    }\n    InAppBrowserObject.prototype._loadAfterBeforeload = function (strUrl) { return cordovaInstance(this, \"_loadAfterBeforeload\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.show = function () { return cordovaInstance(this, \"show\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.close = function () { return cordovaInstance(this, \"close\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.hide = function () { return cordovaInstance(this, \"hide\", { \"sync\": true }, arguments); };\n    InAppBrowserObject.prototype.executeScript = function (script) { return cordovaInstance(this, \"executeScript\", {}, arguments); };\n    InAppBrowserObject.prototype.insertCSS = function (css) { return cordovaInstance(this, \"insertCSS\", {}, arguments); };\n    InAppBrowserObject.prototype.on = function (event) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n                    return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n                });\n            }\n        })();\n    };\n    InAppBrowserObject.prototype.on = function (event) {\n        var _this = this;\n        return (function () {\n            if (instanceAvailability(_this) === true) {\n                return new Observable(function (observer) {\n                    _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n                    return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n                });\n            }\n        })();\n    };\n    return InAppBrowserObject;\n}());\nexport { InAppBrowserObject };\nvar InAppBrowser = /** @class */ (function (_super) {\n    __extends(InAppBrowser, _super);\n    function InAppBrowser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n     * @param  url {string}     The URL to load.\n     * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.\n     * @param  options {string} Options for the InAppBrowser. Optional, defaulting to: location=yes.\n     *                 The options string must not contain any blank space, and each feature's\n     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n     * @returns {InAppBrowserObject}\n     */\n    InAppBrowser.prototype.create = function (url, target, options) {\n        return new InAppBrowserObject(url, target, options);\n    };\n    InAppBrowser.pluginName = \"InAppBrowser\";\n    InAppBrowser.plugin = \"cordova-plugin-inappbrowser\";\n    InAppBrowser.pluginRef = \"cordova.InAppBrowser\";\n    InAppBrowser.repo = \"https://github.com/apache/cordova-plugin-inappbrowser\";\n    InAppBrowser.platforms = [\"AmazonFire OS\", \"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n    InAppBrowser.decorators = [\n        { type: Injectable }\n    ];\n    return InAppBrowser;\n}(IonicNativePlugin));\nexport { InAppBrowser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}